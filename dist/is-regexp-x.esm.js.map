{"version":3,"sources":["../src/is-regexp-x.js"],"names":[],"mappings":"AAAA,OAAO,YAAP,MAAyB,kBAAzB;AACA,OAAO,cAAP,MAA2B,qBAA3B;AACA,OAAO,GAAP,MAAgB,oBAAhB;AACA,OAAO,IAAP,MAAiB,sCAAjB;AACA,OAAO,cAAP,MAA2B,0BAA3B;AACA,OAAO,WAAP,MAAwB,iBAAxB;AACA,OAAO,SAAP,MAAsB,oBAAtB;AAEA,IAAM,SAAS,GAAG,SAAS,CAAC,OAAO,IAAR,CAA3B;AACA,IAAM,UAAU,GAAG,iBAAnB;;AAEA,IAAM,gBAAgB,GAAG,SAAS,YAAT,CAAsB,KAAtB,EAA6B,UAA7B,EAAyC;AAChE,MAAI;AACF,IAAA,KAAK,CAAC,SAAN,GAAkB,CAAlB;AACA,IAAA,SAAS,CAAC,KAAD,CAAT;AAEA,WAAO,IAAP;AACD,GALD,CAKE,OAAO,CAAP,EAAU;AACV,WAAO,KAAP;AACD,GAPD,SAOU;AACR,IAAA,cAAc,CAAC,KAAD,EAAQ,WAAR,EAAqB,UAArB,CAAd;AACD;AACF,CAXD;AAaA;;;;;;;;AAMA,IAAM,OAAO,GAAG,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AACtC,MAAI,YAAY,CAAC,KAAD,CAAZ,KAAwB,KAA5B,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,MAAI,cAAc,KAAK,KAAvB,EAA8B;AAC5B,WAAO,WAAW,CAAC,KAAD,CAAX,KAAuB,UAA9B;AACD;;AAED,MAAM,UAAU,GAAG,IAAI,CAAC,KAAD,EAAQ,WAAR,CAAvB;AACA,MAAM,wBAAwB,GAAG,UAAU,IAAI,GAAG,CAAC,UAAD,EAAa,OAAb,CAAlD;;AAEA,MAAI,wBAAwB,KAAK,IAAjC,EAAuC;AACrC,WAAO,KAAP;AACD;;AAED,SAAO,gBAAgB,CAAC,KAAD,EAAQ,UAAR,CAAvB;AACD,CAjBD;;AAmBA,eAAe,OAAf","file":"is-regexp-x.esm.js","sourcesContent":["import isObjectLike from 'is-object-like-x';\nimport hasToStringTag from 'has-to-string-tag-x';\nimport has from 'has-own-property-x';\nimport gOPD from 'object-get-own-property-descriptor-x';\nimport defineProperty from 'object-define-property-x';\nimport toStringTag from 'to-string-tag-x';\nimport methodize from 'simple-methodize-x';\n\nconst regexExec = methodize(/none/.exec);\nconst regexClass = '[object RegExp]';\n\nconst tryRegexExecCall = function tryRegexExec(value, descriptor) {\n  try {\n    value.lastIndex = 0;\n    regexExec(value);\n\n    return true;\n  } catch (e) {\n    return false;\n  } finally {\n    defineProperty(value, 'lastIndex', descriptor);\n  }\n};\n\n/**\n * This method tests if a value is a regex.\n *\n * @param {*} value - The value to test.\n * @returns {boolean} `true` if value is a regex; otherwise `false`.\n */\nconst isRegex = function isRegex(value) {\n  if (isObjectLike(value) === false) {\n    return false;\n  }\n\n  if (hasToStringTag === false) {\n    return toStringTag(value) === regexClass;\n  }\n\n  const descriptor = gOPD(value, 'lastIndex');\n  const hasLastIndexDataProperty = descriptor && has(descriptor, 'value');\n\n  if (hasLastIndexDataProperty !== true) {\n    return false;\n  }\n\n  return tryRegexExecCall(value, descriptor);\n};\n\nexport default isRegex;\n"]}